name: CI/CD Pipeline

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    outputs:
      IMAGE_URI: ${{ steps.set-image-uri.outputs.IMAGE_URI }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build Docker Image
        run: |
          IMAGE_URI="${{ steps.login-ecr.outputs.registry }}/my-portfolio"
          docker build -t $IMAGE_URI:${{ github.run_number }} .

      - name: Scan Docker image with Trivy
        uses: aquasecurity/trivy-action@0.12.0
        with:
          image-ref: ${{ steps.login-ecr.outputs.registry }}/my-portfolio:${{ github.run_number }}
          format: 'table'
          exit-code: '0'       # Do NOT fail pipeline on HIGH/CRITICAL
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      - name: Push image to Amazon ECR
        run: |
          IMAGE_URI="${{ steps.login-ecr.outputs.registry }}/my-portfolio"
          docker push $IMAGE_URI:${{ github.run_number }}

      - name: Set image URI output
        id: set-image-uri
        run: echo "IMAGE_URI=${{ steps.login-ecr.outputs.registry }}/my-portfolio" >> $GITHUB_OUTPUT

  deploy-ec2:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.EC2_HOST }}          # Public IP or DNS
          username: ${{ secrets.EC2_USER }}      # e.g., "ubuntu" or "ec2-user"
          key: ${{ secrets.EC2_SSH_KEY }}        # Private key from GitHub Secrets
          #port: 22
          script: |
            IMAGE_URI=${{ needs.build.outputs.IMAGE_URI }}
            IMAGE_TAG=${{ github.run_number }}

            # Login to ECR on EC2
            aws ecr get-login-password --region ${{ vars.AWS_REGION }} | docker login --username AWS --password-stdin $IMAGE_URI

            # Pull the latest image
            docker pull $IMAGE_URI:$IMAGE_TAG

            # Stop previous container (if any)
            docker rm -f my-portfolio || true

            # Run new container
            docker run -d --name my-portfolio -p 8080:5001 $IMAGE_URI:$IMAGE_TAG

            # Verify container is running
            docker ps
